#!/usr/bin/env bash

# Check if this is the initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Use git diff-index to check for whitespace errors
if ! git diff-index --check --cached $against
then
    echo "Aborting commit due to whitespace errors."
    exit 1
else
    # Fail on first line that fails.
    set -e

    # Only keep staged files that are added (A), copied (C) or modified (M).
    STAGED=$(git --no-pager diff --name-only --cached --diff-filter=ACM)
    # Files which are only partly staged (eg. git add --patch).
    PATCH_STAGED=$(git --no-pager diff --name-only --diff-filter=ACM $STAGED)
    # Files which are fully staged.
    FULLY_STAGED=$(comm -23 <(echo "$STAGED") <(echo "$PATCH_STAGED"))

    JS_STAGED=$(grep .js$ <<< "$STAGED" || true)
    JS_FULLY_STAGED=$(grep .js$ <<< "$FULLY_STAGED" || true)
    SNAPSHOT_STAGED=$(grep .snap$ <<< "$STAGED" || true)

    # Uncomment for debugging help.
    # tr ' ' '\n' <<< "STAGED $STAGED PATCH_STAGED $PATCH_STAGED FULLY_STAGED $FULLY_STAGED JS_STAGED $JS_STAGED JS_FULLY_STAGED $JS_FULLY_STAGED SNAPSHOT_STAGED $SNAPSHOT_STAGED"

    if [ -n "$JS_STAGED" ];
    then
        # Format all files.
        npm run formatter:js -s -- --write $JS_STAGED
        # Only re-stage fully staged files.
        git add $JS_FULLY_STAGED

        # Lint all files.
        npm run linter:js -s -- $JS_STAGED
    fi

    if [ -n "$JS_STAGED" ] || [ -n "$SNAPSHOT_STAGED" ];
    then
        npm run test:coverage -s
    fi

    exit 0
fi
